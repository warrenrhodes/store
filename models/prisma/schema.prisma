generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --------------------------------Media model------------------------------------
// --------------------------------Media model------------------------------------
enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime           @default(now())
  fileName    String             @unique(map: "fileName_1")
  products    MediasOnProducts[]
  categories  Category[]
  type        MediaType
  updatedAt   DateTime           @updatedAt
  url         String
  blurDataUrl String?
  creatorId   String
}

// --------------------------------shipment model------------------------------------
// --------------------------------shipment model------------------------------------
enum ShipmentMethod {
  DELIVERY
  EXPEDITION
}

model Shipment {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  method    ShipmentMethod @default(DELIVERY)
  isActive  Boolean        @default(true)
  cost      Float
  locations String[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  creatorId String
}

// --------------------------------categories model------------------------------------
// --------------------------------categories model------------------------------------
type SeoMetadata {
  seoTitle       String?
  seoDescription String?
  keywords       String[]
}

model Category {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String                 @unique(map: "slug_1")
  description String?
  image       Media?                 @relation(fields: [imageId], references: [id])
  imageId     String?                @db.ObjectId
  featured    Boolean                @default(false)
  parent      Category?              @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?                @db.ObjectId
  children    Category[]             @relation("CategoryHierarchy")
  blogs       CategoriesOnBlogs[]
  products    CategoriesOnProducts[]
  seoMetadata SeoMetadata?
  creatorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------------------promotion model------------------------------------
// --------------------------------promotion model------------------------------------
enum PromotionStatus {
  DRAFT
  ACTIVE
  EXPIRED
  DISABLED
}

enum PromotionActionType {
  PERCENTAGE_DISCOUNT
  FIXED_DISCOUNT
  FREE_SHIPPING
  FREE_PRODUCT
  BUY_X_GET_Y
}

enum PromotionConditionType {
  MINIMUM_QUANTITY
  SPECIFIC_PRODUCTS
  DELIVERY_METHOD
  LOCATION
}

type PromotionAction {
  type        PromotionActionType
  value       String
  maxDiscount Float?
}

type PromotionCondition {
  type  PromotionConditionType
  value String
}

type Metadata {
  createdBy String
  updatedBy String
  notes     String?
}

type UsageLimit {
  perCustomer Int?
  total       Int?
}

model Promotion {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  code        String               @unique(map: "code_1")
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  conditions  PromotionCondition[]
  actions     PromotionAction[]
  usageLimit  UsageLimit?
  status      PromotionStatus      @default(DRAFT)
  priority    Int                  @default(0)
  metadata    Metadata
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  creatorId   String

  @@index([status], map: "status_1")
  @@index([startDate, endDate], map: "startDate_1_endDate_1")
}

// --------------------------------blog model------------------------------------
// --------------------------------blog model------------------------------------
enum BlogContentType {
  TEXT
  HTML
  MARKDOWN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BlogLayout {
  DEFAULT
  FEATURED
  MINIMAL
}

type BlogContent {
  type    BlogContentType
  content String
  excerpt String?
}

type BlogAuthor {
  name   String
  bio    String?
  avatar String?
}

type BlogMetadata {
  title         String
  description   String?
  keywords      String[]
  author        BlogAuthor
  readingTime   Int?
  coverImageURL String?
  blurDataUrl   String?
  featured      Boolean    @default(false)
}

type CustomFields {
  key   String
  value String
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  String @db.ObjectId
}

model Blog {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  slug         String              @unique(map: "slug_1")
  title        String
  content      BlogContent
  metadata     BlogMetadata
  categories   CategoriesOnBlogs[]
  tags         String[]
  status       BlogStatus          @default(DRAFT)
  publishedAt  DateTime?
  customFields CustomFields[]
  layout       BlogLayout          @default(DEFAULT)
  comments     Comment[]
  creatorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance Optimization Indexes
  @@index([status], map: "status_1")
  @@index([metadata.featured], map: "metadata.featured_1")
  @@index([tags], map: "tags_1")
  @@index([createdAt(sort: Desc)], map: "createdAt_-1")
}

// --------------------------------product model------------------------------------
// --------------------------------product model------------------------------------
enum ProductContentType {
  HTML
  TEXT
}

enum ProductStatus {
  draft
  published
  archived
}

type ProductDescription {
  contentType ProductContentType
  content     String
}

type Feature {
  icon        String?
  title       String
  description ProductDescription?
}

type Price {
  regular       Float
  sale          Float?
  saleStartDate DateTime?
  saleEndDate   DateTime?
}

type Inventory {
  quantity          Int @default(0)
  lowStockThreshold Int @default(5)
  stockQuantity     Int @default(0)
}

type ProductSeoMetadata {
  seoTitle       String
  seoDescription String
  keywords       String[]
}

model Product {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String                 @unique(map: "slug_1")
  description  ProductDescription
  media        MediasOnProducts[]
  reviews      Review[]
  isFeature    Boolean                @default(false)
  isNewProduct Boolean                @default(false)
  categories   CategoriesOnProducts[]
  tags         String[]
  price        Price
  features     Feature[]
  status       ProductStatus          @default(draft)
  visibility   Boolean                @default(true)
  inventory    Inventory
  blogUrl      String?
  partnerId    String
  metadata     ProductSeoMetadata
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  OrderItem    OrderItem[]
  userWishlist Wishlist[]
  creatorId    String
}

// --------------------------------review model------------------------------------
// --------------------------------review model------------------------------------
model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  userName   String
  rating     Int
  comment    String
  imageUrl   String?
  helpful    Int      @default(0)
  notHelpful Int      @default(0)
  verify     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creatorId  String
}

// --------------------------------order model------------------------------------
// --------------------------------order model------------------------------------
enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
  COMPLETED
}

type UserData {
  id       String
  email    String
  fullName String
  phone    String
}

type OrderPromotion {
  promotionId    String
  discountAmount Float
  code           String
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
}

type OrderPrices {
  subtotal Float
  shipping Float
  discount Float
  total    Float
}

type DeliveryInfo {
  address         String
  deliveryDate    DateTime
  deliveryTime    String
  city            String?
  additionalNotes String?
  deliveryMethod  String?
  location        String?
}

model Order {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  deliveryInfo DeliveryInfo
  userData     UserData
  promotions   OrderPromotion[]
  items        OrderItem[]
  orderPrices  OrderPrices
  status       OrderStatus      @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id])
  userId       String           @db.ObjectId
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String?    @unique
  email           String?    @unique
  fullName        String?
  avatar          String?
  phone           String?
  isAnonymous     Boolean    @default(true)
  productWishlist Wishlist[]
  order           Order[]
}

//------------------ Relation schema --------------------------------
//------------------ Relation schema --------------------------------

/// Many to many ( a blog can have 0 or more categories and categories can be link to 
/// one or more blog)
model CategoriesOnBlogs {
  id String @id @default(cuid()) @map("_id")

  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@unique([blogId, categoryId])
}

model CategoriesOnProducts {
  id         String   @id @default(cuid()) @map("_id")
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@unique([productId, categoryId])
}

model MediasOnProducts {
  id String @id @default(cuid()) @map("_id")

  product    Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId  String   @db.ObjectId
  media      Media    @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mediaId    String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@unique([productId, mediaId])
}

model Wishlist {
  id String @id @default(cuid()) @map("_id")

  product    Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId  String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId     String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@unique([productId, userId])
}
