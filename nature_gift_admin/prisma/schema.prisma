generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  fileName           String             @unique
  products           MediasOnProducts[]
  categories         Category[]
  type               MediaType
  updatedAt          DateTime           @updatedAt
  url                String
  blurDataUrl        String?
  creatorId          String
  cloudinaryPublicId String?
}

enum ShipmentMethod {
  DELIVERY
  EXPEDITION
}

model Shipment {
  id        String         @id @default(uuid())
  method    ShipmentMethod @default(DELIVERY)
  isActive  Boolean        @default(true)
  cost      Float
  locations String[]       @db.Text
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  creatorId String
}

model Category {
  id          String                 @id @default(uuid())
  name        String
  slug        String                 @unique
  description String?
  image       Media?                 @relation(fields: [imageId], references: [id])
  imageId     String?
  featured    Boolean                @default(false)
  parent      Category?              @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?
  children    Category[]             @relation("CategoryHierarchy")
  blogs       CategoriesOnBlogs[]
  products    CategoriesOnProducts[]
  seoMetadata Json?
  creatorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PromotionStatus {
  DRAFT
  ACTIVE
  EXPIRED
  DISABLED
}

enum PromotionActionType {
  PERCENTAGE_DISCOUNT
  FIXED_DISCOUNT
  FREE_SHIPPING
  FREE_PRODUCT
  BUY_X_GET_Y
}

enum PromotionConditionType {
  MINIMUM_QUANTITY
  SPECIFIC_PRODUCTS
  DELIVERY_METHOD
  LOCATION
}

model Promotion {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  conditions  Json[]
  actions     Json[]
  usageLimit  Json?
  status      PromotionStatus @default(DRAFT)
  priority    Int        @default(0)
  metadata    Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creatorId   String

  @@index([status])
  @@index([startDate, endDate])
}

enum BlogContentType {
  TEXT
  HTML
  MARKDOWN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BlogLayout {
  DEFAULT
  FEATURED
  MINIMAL
}

model Comment {
  id      String @id @default(uuid())
  comment String
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  String
}

model Blog {
  id           String              @id @default(uuid())
  slug         String              @unique
  title        String
  content      Json
  metadata     Json
  categories   CategoriesOnBlogs[]
  tags         String[]            @db.Text
  status       BlogStatus          @default(DRAFT)
  publishedAt  DateTime?
  customFields Json[]
  layout       BlogLayout          @default(DEFAULT)
  comments     Comment[]
  creatorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([tags])
  @@index([createdAt(sort: Desc)])
}

enum ProductContentType {
  HTML
  TEXT
}

enum ProductStatus {
  draft
  published
  archived
}

model Product {
  id           String                 @id @default(uuid())
  title        String
  slug         String                 @unique
  description  Json
  media        MediasOnProducts[]
  reviews      Review[]
  isFeature    Boolean                @default(false)
  isNewProduct Boolean                @default(false)
  categories   CategoriesOnProducts[]
  tags         String[]               @db.Text
  price        Json
  features     Json[]
  status       ProductStatus          @default(draft)
  visibility   Boolean                @default(true)
  inventory    Json
  blogUrl      String?
  partnerId    String
  metadata     Json
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  OrderItem    OrderItem[]
  userWishlist Wishlist[]
  creatorId    String
}

model Review {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  userName   String
  rating     Int
  comment    String
  imageUrl   String?
  helpful    Int      @default(0)
  notHelpful Int      @default(0)
  verify     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creatorId  String
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
  COMPLETED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
}

model Order {
  id           String      @id @default(uuid())
  deliveryInfo Json
  userData     Json
  promotions   Json[]
  items        OrderItem[]
  orderPrices  Json
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  userId       String
}

model User {
  id              String     @id @default(uuid())
  clerkId         String?    @unique
  email           String?    @unique
  fullName        String?
  avatar          String?
  phone           String?
  isAnonymous     Boolean    @default(true)
  productWishlist Wishlist[]
  orders          Order[]
}

model CategoriesOnBlogs {
  id         String   @id @default(cuid())
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime @default(now())

  @@unique([blogId, categoryId])
}

model CategoriesOnProducts {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime @default(now())

  @@unique([productId, categoryId])
}

model MediasOnProducts {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId  String
  media      Media    @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mediaId    String
  assignedAt DateTime @default(now())

  @@unique([productId, mediaId])
}

model Wishlist {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId     String
  assignedAt DateTime @default(now())

  @@unique([productId, userId])
}